angular.module('Spree', [
  "ngCookies"
  "ui.router",
  'ngResource'
]).config([
  "$stateProvider"
  "$urlRouterProvider"
  "$locationProvider"
  "$httpProvider"
  ($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) ->
    access = routingConfig.accessLevels
    $stateProvider.state("public",
      abstract: true
      template: "<ui-view/>"
      data:
        access: access.public
    ).state "public.404",
      url: "/404/"
      templateUrl: "404"

    $stateProvider.state("anon",
      abstract: true
      template: "<ui-view/>"
      data:
        access: access.anon
    ).state('anon.home',
      url: '/',
      templateUrl: '<%= asset_path "home.html" %>'
    ).state("anon.login",
      url: "/login/"
      templateUrl: '<%= asset_path "login.html" %>'
      controller: "LoginCtrl"
    ).state('anon.register',
      url: "/register/"
      templateUrl: '<%= asset_path "register.html" %>'
      controller: "RegisterCtrl"
    ).state('anon.products',
      url: '/products',
      templateUrl: '<%= asset_path "products.html" %>',
      controller: 'ProductsController'
    ).state('anon.product',
      url: '/products/{id}',
      templateUrl: '<%= asset_path "product.html" %>',
      controller: 'ProductController'
    ).state('anon.checkout',
      url: '/checkout',
      templateUrl: '<%= asset_path "checkout.html" %>',
      controller: 'CheckoutController'
    ).state('anon.profile',
      url: '/profile',
      templateUrl: '<%= asset_path "profile.html" %>',
      controller: 'ProfileCtrl')

    $stateProvider.state("user",
      abstract: true
      template: "<ui-view/>"
      data:
        access: access.user
    ).state("user.home",
      url: "/"
      templateUrl: '<%= asset_path "home.html" %>'
    # ).state('user.products',
    #   url: '/products',
    #   templateUrl: '<%= asset_path "products.html" %>',
    #   controller: 'ProductsController'
    # ).state('user.product',
    #   url: '/products/{id}',
    #   templateUrl: '<%= asset_path "product.html" %>',
    #   controller: 'ProductController'
    ).state("user.private",
      abstract: true
      url: "/private/"
      templateUrl: "private/layout"
    ).state("user.private.home",
      url: ""
      templateUrl: "private/home"
    ).state("user.private.nested",
      url: "nested/"
      templateUrl: "private/nested"
    ).state "user.private.admin",
      url: "admin/"
      templateUrl: "private/nestedAdmin"
      data:
        access: access.admin

    $stateProvider.state("admin",
      abstract: true
      template: "<ui-view/>"
      data:
        access: access.admin
    ).state "admin.admin",
      url: "/admin/"
      templateUrl: "admin"
      controller: "AdminCtrl"

    $urlRouterProvider.otherwise "/404"
    $urlRouterProvider.rule ($injector, $location) ->
      return  if $location.protocol() is "file"
      path = $location.path()
      search = $location.search()
      params = undefined
      return  if path[path.length - 1] is "/"
      return path + "/"  if Object.keys(search).length is 0
      params = []
      angular.forEach search, (v, k) ->
        params.push k + "=" + v
        return

      path + "/?" + params.join("&")

    $locationProvider.html5Mode true
    $httpProvider.interceptors.push ($q, $location) ->
      responseError: (response) ->
        $location.path "/login"  if response.status is 401 or response.status is 403
        $q.reject response

]).run [
  "$rootScope"
  "$state"
  "Auth"
  "$http"
  ($rootScope, $state, Auth, $http) ->
    $http.defaults.headers.common = {"X-SPREE-TOKEN" : Spree.api_key}

    $rootScope.$on "$stateChangeStart", (event, toState, toParams, fromState, fromParams) ->
      unless Auth.authorize(toState.data.access)
        $rootScope.error = "Seems like you tried accessing a route you don't have access to..."
        event.preventDefault()
        if fromState.url is "^"
          if Auth.isLoggedIn()
            $state.go "user.home"
          else
            $rootScope.error = null
            $state.go "anon.login"
      return

]


# window.App.config ($routeProvider, $locationProvider) ->
#   $routeProvider
#   .when('/', {
#     templateUrl: 'home.html',
#     controller: 'HomeController'
#   })
#   .when('/products', {
#     templateUrl: 'products.html',
#     controller: 'ProductsController'
#   })
#   .when('/products/:id', {
#     templateUrl: 'product.html',
#     controller: 'ProductController'
#   })
#   .when('/search/:q', {
#     templateUrl: 'products.html',
#     controller: 'SearchController'
#   })
#   .when('/login', {
#     templateUrl: 'login.html',
#     controller: 'AuthController'
#   })
#   .when('/logout', {
#     templateUrl: 'login.html',
#     controller: 'AuthController'
#   })
#   .when('/myboard', {
#     templateUrl: 'myboard.html',
#     controller: 'MyboardController'
#   })
#   .when('/checkout', {
#     templateUrl: 'checkout.html',
#     controller: 'CheckoutController'
#   })
#   .when('/company/:company_name', {
#     templateUrl: 'company.html',
#     controller: 'CompanyController'
#   })
#   .otherwise({redirectTo:"/"})

# window.fake_brands = (num)->
#   p = []

#   for i in [1..num]
#     p.push {
#       id: i,
#       name: "brand#{i}"
#       products_count: i*10,
#     }
#   p


# window.fake_products = (num)->
#   p = []

#   for i in [1..num]
#     p.push {
#       id: i,
#       name: "n#{i}"
#       brand: "brand#{i}",
#       image: "frontend/product#{i}.jpg",
#       price: '99,95',
#       discount: '69,00'
#     }
#   p

